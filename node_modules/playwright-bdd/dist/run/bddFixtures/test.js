"use strict";
/**
 * Test-scoped fixtures added by playwright-bdd.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.test = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
const worker_1 = require("./worker");
const scenario_1 = require("../../hooks/scenario");
const invokeStep_1 = require("../invokeStep");
const bddMeta_1 = require("../../gen/bddMeta");
const enrichReporterData_1 = require("../../config/enrichReporterData");
const specialTags_1 = require("../../specialTags");
const bddAnnotation_1 = require("../bddAnnotation");
// Hide all BDD fixtures in reporter.
// 'box' option was added in PW 1.46,
// make type coercion to satisfy TS in early PW versions
const fixtureOptions = { scope: 'test', box: true };
exports.test = worker_1.test.extend({
    // apply timeout and slow from special tags in runtime instead of generating in test body
    // to have cleaner test body and track fixtures in timeout calculation.
    $applySpecialTags: [
        async ({ $bddTestMeta }, use, testInfo) => {
            const specialTags = new specialTags_1.SpecialTags($bddTestMeta?.ownTags, $bddTestMeta?.tags);
            if (specialTags.timeout !== undefined)
                testInfo.setTimeout(specialTags.timeout);
            if (specialTags.slow !== undefined)
                testInfo.slow();
            await use();
        },
        fixtureOptions,
    ],
    // $lang fixture can be overwritten in test file
    $lang: [({}, use) => use(''), fixtureOptions],
    $bddContext: [
        async ({ $tags, $test, $step, $bddConfig, $lang, $bddTestMeta, $uri, $world }, use, testInfo) => {
            const bddAnnotation = $bddTestMeta && (0, enrichReporterData_1.getEnrichReporterData)($bddConfig)
                ? new bddAnnotation_1.BddAnnotation(testInfo, $bddTestMeta, $uri)
                : undefined;
            await use({
                config: $bddConfig,
                testInfo,
                test: $test,
                lang: $lang,
                tags: $tags,
                step: $step,
                world: $world,
                bddAnnotation,
            });
        },
        fixtureOptions,
    ],
    // Unused fixtures below are important for lazy initialization only on bdd projects
    // See: https://github.com/vitalets/playwright-bdd/issues/166
    Given: [
        ({ $bddContext, $before, $applySpecialTags }, use) => use((0, invokeStep_1.createStepInvoker)($bddContext, 'Given')),
        fixtureOptions,
    ],
    When: [
        ({ $bddContext, $before, $applySpecialTags }, use) => use((0, invokeStep_1.createStepInvoker)($bddContext, 'When')),
        fixtureOptions,
    ],
    Then: [
        ({ $bddContext, $before, $applySpecialTags }, use) => use((0, invokeStep_1.createStepInvoker)($bddContext, 'Then')),
        fixtureOptions,
    ],
    And: [
        ({ $bddContext, $before, $applySpecialTags }, use) => use((0, invokeStep_1.createStepInvoker)($bddContext, 'And')),
        fixtureOptions,
    ],
    But: [
        ({ $bddContext, $before, $applySpecialTags }, use) => use((0, invokeStep_1.createStepInvoker)($bddContext, 'But')),
        fixtureOptions,
    ],
    // For cucumber-style $world will be overwritten in test files
    // For playwright-style $world will be empty object
    // Note: although pw-style does not expect usage of world / this in steps,
    // some projects request it for better migration process from cucumber
    // See: https://github.com/vitalets/playwright-bdd/issues/208
    $world: [({}, use) => use({}), fixtureOptions],
    // init $bddFileMeta with empty object, will be overwritten in each BDD test file
    $bddFileMeta: [({}, use) => use({}), fixtureOptions],
    // particular test meta
    $bddTestMeta: [
        ({ $bddFileMeta }, use, testInfo) => use((0, bddMeta_1.getBddTestMeta)($bddFileMeta, testInfo)),
        fixtureOptions,
    ],
    // particular test tags
    $tags: [({ $bddTestMeta }, use) => use($bddTestMeta?.tags || []), fixtureOptions],
    // init $test with base test, but it will be overwritten in test file
    $test: [({}, use) => use(worker_1.test), fixtureOptions],
    $testInfo: [({}, use, testInfo) => use(testInfo), fixtureOptions],
    $step: [({}, use) => use({ title: '' }), fixtureOptions],
    // feature file uri, relative to configDir, will be overwritten in test file
    $uri: [({}, use) => use(''), fixtureOptions],
    // can be overwritten in test file if there are scenario hooks
    $scenarioHookFixtures: [({}, use) => use({}), fixtureOptions],
    $before: 
    // Unused dependencies are important:
    // 1. $beforeAll / $afterAll: in pw < 1.39 worker-scoped auto-fixtures were called after test-scoped
    // 2. $after: to call after hooks in case of errors in before hooks
    [
        async ({ $scenarioHookFixtures, $bddContext, $tags, $beforeAll, $afterAll, $after }, use, $testInfo) => {
            await (0, scenario_1.runScenarioHooks)('before', {
                $bddContext,
                $tags,
                $testInfo,
                ...$scenarioHookFixtures,
            });
            await use();
        },
        fixtureOptions,
    ],
    $after: [
        async ({ $scenarioHookFixtures, $bddContext, $tags }, use, $testInfo) => {
            await use();
            await (0, scenario_1.runScenarioHooks)('after', {
                $bddContext,
                $tags,
                $testInfo,
                ...$scenarioHookFixtures,
            });
        },
        fixtureOptions,
    ],
});
//# sourceMappingURL=test.js.map